{"version":3,"sources":["components/Hangman/Hangman.jsx","components/BamTitle/BamTitle.jsx","components/Play/Play.jsx","api/getWord.js","components/MainGame/MainGame.jsx","components/RevealedWord/RevealedWord.jsx","components/GameOver/GameOver.jsx","components/TitleScreen/TitleScreen.jsx","components/Wasted/Wasted.jsx","components/NewGameButton/NewGameButton.jsx","components/ScoreBoard/ScoreBoard.jsx","components/ResetStatsButton/ResetStatsButton.jsx","components/UsedLetters/UsedLetters.jsx","components/HealthBar/HealthBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Hangman","incorrectGuessCount","containerRef","useRef","canvasRef","drawnPartsRef","previousIncorrectGuessCountRef","useState","size","setSize","hangmanParts","useMemo","bodyHeight","appendageWidth","canvasContext","lineWidth","beginPath","moveTo","lineTo","stroke","arc","Math","PI","getHangmanParts","resizeCanvas","useCallback","style","getComputedStyle","current","containerSize","parseInt","width","resizeCanvasDebounce","debounce","resetCanvas","canvas","getContext","clearRect","height","useEffect","window","addEventListener","removeEventListener","context","slice","forEach","f","drawFn","className","ref","BamTitle","props","reveal","console","log","revealedLetters","state","word","length","clearInterval","timer","setState","getBamLetters","letters","letter","charAt","push","key","sizingRef","React","createRef","ceil","this","getBoundingClientRect","setInterval","opacity","replace","Component","SPACE","Play","getRevealedWord","lettersGuessed","isValid","newWord","i","char","setTimeout","solved","handleKeyDown","strikes","indexOf","prevProps","prevState","snapshot","onEndGame","handleEventType","handleKeys","onKeyEvent","max","api","words","default","floor","random","data","GAME_STATES","TITLE","PLAYING","GAME_OVER","VICTORY","GETTING_WORD","LOCAL_STORAGE_KEY","MainGame","wins","losses","onResetStats","localStorage","setItem","onStartGame","gameState","didWin","JSON","stringify","getWord","wordApi","currentWord","err","getDisplay","won","parse","getItem","RevealedWord","toUpperCase","min","arr","j","l","marginLeft","GameOver","getMessage","NewGameButtom","TitleScreen","marginTop","getScoreBoardIfNeeded","Wasted","src","alt","memo","tabIndex","autoFocus","onClick","ScoreBoard","ResetStatsButton","ABCS","UsedLetters","map","HealthBar","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.900b7dbf.chunk.js","sourcesContent":["import React, { useRef, useEffect, useMemo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\n\nimport './Hangman.css';\n\n/**\n * Returns an array of functions that draw each part of the Hangman on the\n * canvas, scaled according to the passed size.\n *\n * @param {Number} size\n */\nconst getHangmanParts = size => {\n  const bodyHeight = size / 2;\n  const appendageWidth = bodyHeight / 3;\n\n  const platform = canvasContext => {\n    canvasContext.lineWidth = 10;\n    canvasContext.beginPath();\n    canvasContext.moveTo(0, size);\n    canvasContext.lineTo(size, size);\n    canvasContext.stroke();\n  };\n\n  const post = canvasContext => {\n    canvasContext.lineWidth = 10;\n    canvasContext.beginPath();\n    canvasContext.moveTo(0, 0);\n    canvasContext.lineTo(0, size);\n    canvasContext.stroke();\n  };\n\n  const pole = canvasContext => {\n    canvasContext.lineWidth = 10;\n    canvasContext.beginPath();\n    canvasContext.moveTo(0, 0);\n    canvasContext.lineTo(size / 2, 0);\n    canvasContext.stroke();\n  };\n\n  const rope = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, 0);\n    canvasContext.lineTo(size / 2, size / 10);\n    canvasContext.stroke();\n  };\n\n  const head = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.arc(size / 2, size / 10 + size / 16, size / 16, 0, Math.PI * 2, true);\n    canvasContext.stroke();\n  };\n\n  const body = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size / 10 + size / 8);\n    canvasContext.lineTo(size / 2, size - bodyHeight);\n    canvasContext.stroke();\n  };\n\n  const leftArm = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size / 3);\n    canvasContext.lineTo(size / 2 - appendageWidth, size / 3);\n    canvasContext.stroke();\n  };\n\n  const rightArm = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size / 3);\n    canvasContext.lineTo(size / 2 + appendageWidth, size / 3);\n    canvasContext.stroke();\n  };\n\n  const leftLeg = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size - bodyHeight);\n    canvasContext.lineTo(size / 2 - appendageWidth, size - bodyHeight + appendageWidth);\n    canvasContext.stroke();\n  };\n\n  const rightLeg = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size - bodyHeight);\n    canvasContext.lineTo(size / 2 + appendageWidth, size - bodyHeight + appendageWidth);\n    canvasContext.stroke();\n  };\n\n  return [platform, post, pole, rope, head, body, leftArm, rightArm, leftLeg, rightLeg];\n};\n\n// Helper function to prepare the canvas for drawing\nconst draw = (canvasContext, drawFn) => {\n  canvasContext.lineWidth = 2; // Reset line width to default\n  drawFn(canvasContext);\n};\n\n// Clears the canvas\nconst clearCanvas = canvas => {\n  const context = canvas.getContext('2d');\n  context.clearRect(0, 0, canvas.width, canvas.height);\n};\n\n/**\n * Draws the \"Hangman\" graphic with parts filled in according to the number of incorrect guesses.\n *\n * For example, to draw the first 5 parts of the hangman:\n *\n * ```javascript\n * <Hangman incorrectGuessCount={5} />\n * ```\n */\nexport const Hangman = ({ incorrectGuessCount = 0 }) => {\n  const containerRef = useRef();\n  const canvasRef = useRef();\n  const drawnPartsRef = useRef(0);\n  const previousIncorrectGuessCountRef = useRef(incorrectGuessCount);\n  const [size, setSize] = useState();\n\n  const hangmanParts = useMemo(() => getHangmanParts(size), [size]);\n\n  // Resizes the canvas based on its parent's width\n  const resizeCanvas = useCallback(() => {\n    const style = getComputedStyle(containerRef.current);\n    const containerSize = parseInt(style.width);\n    setSize(containerSize);\n  }, []);\n\n  // Debounced version to use as a resize event listener\n  const resizeCanvasDebounce = useCallback(debounce(resizeCanvas, 50), []);\n\n  // Clears and resets the canvas so parts can be redrawn\n  const resetCanvas = () => {\n    clearCanvas(canvasRef.current);\n    drawnPartsRef.current = 0;\n  };\n\n  // Resize the canvas when the window size changes\n  useEffect(() => {\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvasDebounce);\n    return () => window.removeEventListener('resize', resizeCanvasDebounce);\n  }, [resizeCanvas, resizeCanvasDebounce]);\n\n  // Reset and redraw whenever canvas size changes\n  useEffect(resetCanvas, [size]);\n\n  // Draw the hangman parts\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // If the guess count went backward then reset the drawn state\n    if (previousIncorrectGuessCountRef.current > incorrectGuessCount) {\n      resetCanvas();\n    }\n    previousIncorrectGuessCountRef.current = incorrectGuessCount;\n\n    // Draw the relevant part for the number of incorrect guesses\n    const partsToDraw = hangmanParts.slice(drawnPartsRef.current, incorrectGuessCount);\n    partsToDraw.forEach(f => draw(context, f));\n    drawnPartsRef.current = incorrectGuessCount;\n  }, [hangmanParts, incorrectGuessCount]);\n\n  return (\n    <div className=\"Hangman\" ref={containerRef}>\n      <canvas ref={canvasRef} height={size} width={size}></canvas>\n    </div>\n  );\n};\n\nHangman.propTypes = {\n  incorrectGuessCount: PropTypes.number.isRequired,\n};\n","import React from 'react';\n\nimport './BamTitle.css';\n\nexport class BamTitle extends React.Component {\n  /**\n   * @param {{\n   *   word: string\n   * }} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      revealedLetters: 0,\n      width: null,\n    };\n\n    this.sizingRef = React.createRef();\n    this.letters = [];\n  }\n\n  componentDidMount() {\n    console.log('Componentdidmount for bamtitle');\n    const width = Math.ceil(this.sizingRef.current.getBoundingClientRect().width) + 1;\n    this.setState({ width });\n    this.timer = setInterval(this.reveal, 600);\n  }\n\n  reveal = () => {\n    console.log('Reveal called');\n    let revealedLetters = this.state.revealedLetters;\n    ++revealedLetters;\n    if (revealedLetters === this.props.word.length) {\n      clearInterval(this.timer);\n    }\n    this.setState({\n      revealedLetters\n    });\n  };\n\n  getBamLetters = () => {\n    const {\n      props: {\n        word,\n      },\n      state: {\n        revealedLetters,\n      },\n    } = this;\n\n    if (revealedLetters === 0 || this.letters.length === revealedLetters) return this.letters;\n\n    // Save previous list of letters - Why make a new list of identical elements each time?\n    // Would be terrible form for very large words.\n    let letters = this.letters;\n    let letter = word.charAt(revealedLetters - 1);\n\n    // Need an &nbsp in unicode for the word\n    letter = letter === ' ' ? '\\u00A0' : letter;\n    letters.push(<span key={revealedLetters - 1} className={'animated'}>{letter}</span>);\n    return letters;\n  };\n\n  render () {\n    const {\n      sizingRef,\n      props: {\n        word,\n      },\n      state: {\n        width,\n      }\n    } = this;\n\n    return (<div className={'bamtitle'} style={{ width }}>\n      {width ? this.getBamLetters() : (<span ref={sizingRef} style={{ opacity: 0, }}>{word.replace(' ', '\\u00A0')}</span>)}\n    </div>);\n  }\n}\n","import React from 'react';\n\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { BamTitle, Hangman, RevealedWord, Wasted, UsedLetters, HealthBar } from '../';\n\nimport './Play.css';\n\nconst SPACE = '\\u00A0';\n\nexport class Play extends React.Component {\n  /**\n   *\n   * @param {{\n   *   word: string,\n   *   onEndGame: function(boolean)\n   * }} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lettersGuessed: {},\n      strikes: 0,\n      solved: false,\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.strikes === 9 && this.state.strikes === 10) {\n      // Do defeat handling here\n      setTimeout(() => {\n        this.props.onEndGame(false);\n      }, 2500);\n    } else if (!prevState.solved && this.state.solved) {\n      setTimeout(() => {\n        this.props.onEndGame(true);\n      }, 1000);\n    }\n  }\n\n  getRevealedWord = () => {\n    const {\n      props: {\n        word,\n      },\n      state: {\n        lettersGuessed,\n      }\n    } = this;\n\n    let isValid = true;\n\n    let newWord = '';\n    let length = word.length;\n\n    for (let i = 0; i < length; ++i) {\n      let char = word.charAt(i);\n      if (char !== SPACE && lettersGuessed[char] !== true) {\n        newWord += SPACE;\n        isValid = false;\n      } else {\n        newWord += char;\n      }\n    }\n\n    if (isValid) {\n      setTimeout(() => {\n        this.setState({\n          solved: true,\n        });\n      }, 1000);\n    }\n\n    console.log(newWord);\n\n    return newWord;\n  };\n\n  handleKeyDown = (key) => {\n    let {\n      props: {\n        word,\n      },\n      state: {\n        lettersGuessed,\n        strikes,\n      }\n    } = this;\n\n    if (lettersGuessed[key] || strikes === 10) {\n      return;\n    }\n\n    lettersGuessed[key] = true;\n\n    if (word.indexOf(key) === -1) {\n      ++strikes;\n    }\n\n    this.setState({\n      lettersGuessed,\n      strikes,\n    });\n  };\n\n  render () {\n    const {\n      handleKeyDown,\n      getRevealedWord,\n      state: {\n        strikes,\n        lettersGuessed,\n      }\n    } = this;\n    return (\n      <div className={'play-container'}>\n        <KeyboardEventHandler\n          handleEventType={'keydown'}\n          handleKeys={['alphabetic']}\n          onKeyEvent={handleKeyDown}/>\n        <div className={'title-container'}>\n          <BamTitle word={'HANGMAN'}/>\n        </div>\n        <HealthBar strikes={strikes} max={10}/>\n        <div className={'hang-container'}>\n          <Hangman incorrectGuessCount={strikes}/>\n          {strikes === 10 ? <Wasted/> : null}\n        </div>\n        <RevealedWord word={getRevealedWord()}/>\n        <UsedLetters lettersGuessed={lettersGuessed}/>\n        <p>Press a letter on your keyboard.</p>\n      </div>\n\n    );\n  }\n}\n","import * as data from './words_dictionary.json';\n\nclass WordApi {\n  /**\n   * @param {Object} words\n   */\n  constructor(words) {\n    this.words = words.default;\n    this.length = this.words.length;\n  }\n\n  getWord() {\n    return this.words[Math.floor(Math.random() * this.length)];\n  }\n}\n\nconst api = new WordApi(data);\n\nexport default api;\n","import React from 'react';\nimport { TitleScreen, Play, GameOver } from '../';\nimport wordApi from '../../api/getWord';\n\nconst GAME_STATES = {\n  TITLE: 'TITLE',\n  PLAYING: 'PLAYING',\n  GAME_OVER: 'GAME_OVER',\n  VICTORY: 'VICTORY',\n  GETTING_WORD: 'GETTING_WORD',\n};\n\nconst LOCAL_STORAGE_KEY = 'BirdThoHangmanGameData';\n\nexport class MainGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let wins, losses;\n    if (window.localStorage) {\n      const data = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || {};\n      wins = data.wins;\n      losses = data.losses;\n    }\n\n    this.state = {\n      wins: wins || 0,\n      losses: losses || 0,\n      currentWord: '',\n      gameState: GAME_STATES.TITLE,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.state.gameState === GAME_STATES.GETTING_WORD) {\n      this.getWord();\n    }\n  }\n\n  onResetStats = () => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, null);\n\n    this.setState({\n      wins: 0,\n      losses: 0,\n    });\n  };\n\n  onStartGame = () => {\n    this.setState({\n      gameState: GAME_STATES.GETTING_WORD,\n    });\n  };\n\n  onEndGame = (didWin) => {\n    let {\n      wins,\n      losses,\n    } = this.state;\n\n    let gameState;\n    if (didWin) {\n      ++wins;\n      gameState = GAME_STATES.VICTORY;\n    } else {\n      ++losses;\n      gameState = GAME_STATES.GAME_OVER;\n    }\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({\n      wins,\n      losses,\n    }));\n\n    this.setState({\n      wins, losses, gameState,\n    })\n  };\n\n  getWord = () => {\n    try {\n      const word = wordApi.getWord();\n      if (word) {\n        this.setState({\n          currentWord: word,\n          gameState: GAME_STATES.PLAYING,\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  getDisplay = () => {\n    const {\n      onStartGame,\n      onEndGame,\n      onResetStats,\n      state: {\n        gameState,\n        currentWord,\n        wins,\n        losses,\n      },\n    } = this;\n\n    switch (gameState) {\n      case GAME_STATES.GAME_OVER:\n      case GAME_STATES.VICTORY:\n        return (<GameOver\n          won={gameState === GAME_STATES.VICTORY}\n          wins={wins} losses={losses} word={currentWord}\n          onStartGame={onStartGame} onResetStats={onResetStats}/>);\n      case GAME_STATES.PLAYING:\n        return (<Play word={currentWord} onEndGame={onEndGame}/>);\n      case GAME_STATES.GETTING_WORD:\n        return (<div>Getting word, please wait</div>);\n      case GAME_STATES.TITLE:\n      default:\n        return (<TitleScreen wins={wins} losses={losses} onResetStats={onResetStats} onStartGame={onStartGame}/>);\n    }\n  };\n\n  render () {\n    return this.getDisplay();\n  }\n}","import React from 'react';\n\nimport './RevealedWord.css';\n\nconst LETTER_WIDTH = 40;\nconst LETTER_SPACING = 15;\n\nexport const RevealedWord = (props) => {\n  const word = props.word.toUpperCase();\n\n  // Limiting line length to 9 chars for fitting in 500px wide area\n  const length = Math.min(word.length, 9);\n  const width = length * LETTER_WIDTH + (length - 1) * LETTER_SPACING;\n\n  let arr = [];\n  let j = 0;\n  [...word].forEach((l, i) => {\n\n    if (i > 0 && i % 9 === 0) {\n      arr.push(<br key={j++}/>);\n    }\n\n    arr.push((<div key={j++} className={'letter'} style={(i % 9 === 0) ? { marginLeft: '0px'} : {}}>\n      <span>{l}</span>\n      <div/>\n    </div>));\n  });\n\n  return (\n    <div className={'revealed'} style={{marginLeft: `calc(50% - ${width / 2}px)`, width: `${width}px`}}>\n      {arr}\n    </div>\n  );\n};","import React from 'react';\n\nimport './GameOver.css';\nimport { NewGameButtom, ResetStatsButton, ScoreBoard } from '..';\n\nconst getMessage = (won, word) => {\n  return (won ? ([<p>Congratulations!</p>,<p>You guessed the word:</p>, <p>{word.toUpperCase()}</p>]) :\n    ([<p>The word was:</p>, <p>{word.toUpperCase()}</p>, <p>Better luck next time!</p>]));\n};\n\n/**\n *\n * @param {{\n *   won: boolean,\n *   onStartGame: Function,\n *   word: string,\n *   wins: number,\n *   losses: number,\n * }} props\n * @returns {*}\n * @constructor\n */\nexport const GameOver = (props) => {\n  const {\n    wins,\n    losses,\n    word,\n    won,\n    onStartGame,\n    onResetStats,\n  } = props;\n  return (\n    <div className={'gameover'}>\n      <div className={'message'}>\n        {getMessage(won, word)}\n      </div>\n      <ScoreBoard wins={wins} losses={losses}/>\n      <ResetStatsButton onResetStats={onResetStats}/>\n      <NewGameButtom onStartGame={onStartGame}/>\n    </div>\n  )\n};\n","import React from 'react';\n\nimport './TitleScreen.css';\nimport { NewGameButtom, ResetStatsButton, ScoreBoard } from '..';\n\nconst getScoreBoardIfNeeded = (props) => {\n  const {\n    onResetStats,\n    wins,\n    losses,\n  } = props;\n\n  if (wins > 0 || losses > 0) {\n    return [\n      <p>Welcome back!</p>,\n      <ScoreBoard wins={wins} losses={losses}/>,\n      <ResetStatsButton onResetStats={onResetStats}/>\n    ];\n  } else {\n    return null;\n  }\n};\n\nexport const TitleScreen = (props) => {\n  const {\n    onStartGame,\n    wins, losses,\n  } = props;\n  return (\n    <div className={'title-window'}>\n      <div\n        className={'hang-title'}\n        /* Title page is shorter without scoreboard, so push it down a tad */\n        style={(wins || losses ? {} : {marginTop: '100px'})}\n      >\n        <span>H</span>\n        <span>A</span>\n        <span>N</span>\n        <span>G</span>\n        <span>M</span>\n        <span>A</span>\n        <span>N</span>\n        <div/>\n        <div/>\n        <div/>\n        <div/>\n        <div/>\n        <div/>\n      </div>\n      {getScoreBoardIfNeeded(props)}\n      <NewGameButtom onStartGame={onStartGame}/>\n    </div>\n  );\n};","import React from 'react';\n\nimport './Wasted.css';\n\nexport const Wasted = () => {\n  return (\n    <img className={'wasted'} src={'/wasted.png'} alt={'GTA Wasted splash image - you lost'}/>\n  );\n};\n","import React from 'react';\n\nimport './NewGameButton.css';\n\nexport const NewGameButtom = React.memo((props) =>\n  (<button\n    className={'new-game-button'}\n    tabIndex='0' autoFocus={true}\n    onClick={props.onStartGame}>\n    Start New Game\n  </button>));","import React from 'react';\n\nimport './ScoreBoard.css';\n\nexport const ScoreBoard = (props) => {\n  const {\n    wins,\n    losses,\n  } = props;\n\n  return (\n    <div className={'scoreboard'}>\n      <div className={'score'}>\n        <span>Wins</span>\n        <span>{wins}</span>\n      </div>\n      <div className={'divider'}/>\n      <div className={'score'}>\n        <span>Losses</span>\n        <span>{losses}</span>\n      </div>\n    </div>\n  );\n};","import React from 'react';\n\nimport './ResetStatsButton.css';\n\nexport const ResetStatsButton = React.memo((props) =>\n  (<button\n    className={'reset-stats-button'}\n    tabIndex='0' autoFocus={true}\n    onClick={props.onResetStats}>\n    Reset Stats\n  </button>));","import React from 'react';\n\nimport './UsedLetters.css';\n\nconst ABCS = [...'abcdefghijklmnopqrstuvwxyz'];\n\nconst getLetters = (lettersGuessed) => {\n  return ABCS.map((letter, i) => {\n    return (\n      <span key={i} className={lettersGuessed[letter] ? 'crossed' : ''}>{letter}</span>\n    );\n  });\n};\n\nexport const UsedLetters = (props) => {\n  return (\n    <div className={'used-letters'}>\n      {getLetters(props.lettersGuessed)}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './HealthBar.css';\n\nconst _HealthBar = (props) => {\n  const {\n    strikes,\n    max,\n  } = props;\n  return (\n    <div className={'health-bar'}>\n      <div className={'background'}/>\n      <div className={'health-juice' + (max - strikes <= 2 ? ' pulsing' : '')}\n        style={{width: `${400.0 * ((max-strikes) / max)}px`}}/>\n    </div>\n  );\n};\n\n// This component will be predictable enough to memoize\n// Although its probably not worth it.\nexport const HealthBar = React.memo(_HealthBar);\n","import React from 'react';\nimport { MainGame } from './components';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <MainGame/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}